// Generated by CoffeeScript 1.7.1
(function() {
  $(function() {
    var Map, getDateTimeBucket, iconFromSizeAndIntensity, sliderValueChanged;
    window.startingTime = moment();
    window.data = {};
    window.getCurrentTime = function() {
      var displayTime, hour, minute, val;
      val = $('#timeSlider').val();
      hour = Math.floor(val / 6);
      minute = val - hour * 6;
      displayTime = moment().add('h', hour).add('m', minute * 10);
      return displayTime;
    };
    getDateTimeBucket = function() {
      var time;
      time = getCurrentTime();
      return time.utc().hour() + time.utc().minute() * 0.1;
    };
    sliderValueChanged = function() {
      var marker, _i, _len, _results;
      $("#time").text(getCurrentTime().format("HH:mm"));
      map.resetTime();
      if (markers) {
        _results = [];
        for (_i = 0, _len = markers.length; _i < _len; _i++) {
          marker = markers[_i];
          _results.push(marker.setIcon(iconFromSizeAndIntensity(marker.options.data.m, marker.options.data[getDateTimeBucket()] || 0)));
        }
        return _results;
      }
    };
    iconFromSizeAndIntensity = function(size, intensity) {
      if (intensity == null) {
        intensity = 0;
      }
      return L.divIcon({
        className: 'foo-marker',
        iconSize: new L.Point(Math.log(size) / Math.log(1.5) * 1.5, Math.log(size) / Math.log(1.5) * 1.5),
        html: "<div style='background-color: rgba(0,0,100," + intensity + "); height: 100%; width: 100%;)'></div>"
      });
    };
    Map = (function() {
      function Map() {}

      Map.prototype.el = $('<div class="map"></div>');

      Map.prototype.load = function() {
        this.map = L.map(this.el[0]).setView([51.505, -0.09], 3);
        this.map.locate({
          setView: true,
          maxZoom: 3
        });
        L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png', {
          attribution: '&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors'
        }).addTo(this.map);
        this.terminator = L.terminator(getCurrentTime().format());
        this.terminator.addTo(this.map);
        this.layer = new L.MarkerClusterGroup({
          maxClusterRadius: 30,
          singleMarkerMode: true,
          iconCreateFunction: function(cluster) {
            var average_itensity, size;
            size = _.reduce(cluster.getAllChildMarkers(), (function(memo, marker) {
              return memo + marker.options.data.m;
            }), 0);
            average_itensity = _.reduce(cluster.getAllChildMarkers(), (function(memo, marker) {
              return memo + (marker.options.data[getDateTimeBucket()] || 0) * marker.options.data.m;
            }), 0) / size;
            if (average_itensity < 0.1) {
              average_itensity = 0.1;
            }
            return iconFromSizeAndIntensity(size, average_itensity);
          }
        });
        return this.layer.addTo(this.map);
      };

      Map.prototype.resetTime = function() {
        this.terminator.setLatLngs(L.terminator({
          time: getCurrentTime().valueOf()
        }).getLatLngs());
        this.terminator.redraw();
        return map.layer._featureGroup.eachLayer(function(cluster) {
          if (cluster instanceof L.MarkerCluster) {
            return cluster._updateIcon();
          }
        });
      };

      return Map;

    })();
    return $.getJSON("/by_point_hash.json", function(evt) {
      var autoplay, shouldAutoplay;
      window.map = new Map;
      $("#maps").append(map.el);
      map.load();
      $("#time").text(getCurrentTime().format("HH:mm"));
      $('#timeSlider').on("input change", _.throttle(sliderValueChanged, 300));
      window.data = evt;
      window.markers = _.map(_.values(evt), function(v) {
        return L.marker([v.t, v.g], {
          icon: iconFromSizeAndIntensity(v.m, v[getDateTimeBucket()] || 0),
          data: v
        });
      });
      map.layer.addLayers(markers);
      shouldAutoplay = true;
      $('#timeSlider').on("input change", function() {
        return shouldAutoplay = false;
      });
      autoplay = function() {
        var val;
        if (shouldAutoplay) {
          val = $('#timeSlider').val();
          $("#timeSlider").val((val === "72" ? -71 : ++val));
          sliderValueChanged();
          return setTimeout(autoplay, 500);
        }
      };
      return autoplay();
    });
  });

}).call(this);
